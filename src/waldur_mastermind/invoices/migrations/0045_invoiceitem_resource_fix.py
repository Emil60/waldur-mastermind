# Generated by Django 2.2.13 on 2021-01-27 09:32

import logging

from django.core.exceptions import MultipleObjectsReturned, ObjectDoesNotExist
from django.db import migrations

logger = logging.getLogger(__name__)


def fix_fill_resource_field(apps, schema_editor):
    InvoiceItem = apps.get_model('invoices', 'InvoiceItem')
    Resource = apps.get_model('marketplace', 'Resource')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    Tenant = apps.get_model('openstack', 'Tenant')
    Allocation = apps.get_model('waldur_slurm', 'Allocation')
    VirtualMachine = apps.get_model('waldur_vmware', 'VirtualMachine')

    for item in InvoiceItem.objects.filter(resource__isnull=True):
        if item.details.get('resource_uuid'):
            try:
                item.resource = Resource.objects.get(uuid=item.details['resource_uuid'])
                item.save()
                continue

            except (ObjectDoesNotExist):
                logger.warning(
                    'An invoice item with ID: %d linked with a non-existent resource. Invoice: %d %d.%d',
                    item.id,
                    item.invoice.id,
                    item.invoice.year,
                    item.invoice.month,
                )

        if item.details.get('tenant_uuid'):
            try:
                tenant = Tenant.objects.get(uuid=item.details['tenant_uuid'])
                resource = Resource.objects.get(
                    content_type=ContentType.objects.get_for_model(Tenant),
                    object_id=tenant.id,
                )
                item.resource_id = resource.id
                item.save()
                continue
            except (ObjectDoesNotExist, MultipleObjectsReturned):
                logger.warning(
                    'An invoice item with ID: %d linked with a non-existent tenant. Invoice: %d %d.%d',
                    item.id,
                    item.invoice.id,
                    item.invoice.year,
                    item.invoice.month,
                )

        if item.details.get('scope_uuid'):
            try:
                allocation = Allocation.objects.get(uuid=item.details['scope_uuid'])
                resource = Resource.objects.get(
                    content_type=ContentType.objects.get_for_model(Allocation),
                    object_id=allocation.id,
                )
                item.resource_id = resource.id
                item.save()
                continue
            except (ObjectDoesNotExist, MultipleObjectsReturned):
                pass

            try:
                vm = VirtualMachine.objects.get(uuid=item.details['scope_uuid'])
                resource = Resource.objects.get(
                    content_type=ContentType.objects.get_for_model(VirtualMachine),
                    object_id=vm.id,
                )
                item.resource_id = resource.id
                item.save()
                continue
            except (ObjectDoesNotExist, MultipleObjectsReturned):
                pass

            logger.warning(
                'Scope for invoice item with ID: %d is not found. Invoice: %d %d.%d',
                item.id,
                item.invoice.id,
                item.invoice.year,
                item.invoice.month,
            )


class Migration(migrations.Migration):

    dependencies = [
        ('marketplace', '0036_offeringcomponent_backend_id'),
        ('invoices', '0044_invoiceitem_resource'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('waldur_slurm', '0016_drop_deposit_fields'),
        ('support', '0010_error_traceback'),
        ('openstack', '0021_port_device_info'),
        ('openstack_tenant', '0016_internalip_device_info'),
        ('waldur_vmware', '0024_error_traceback'),
    ]

    operations = [
        migrations.RunPython(fix_fill_resource_field),
    ]
