# Generated by Django 2.2.13 on 2021-01-27 09:32

import decimal
import logging
from calendar import monthrange

import django.db.models.deletion
from django.core.exceptions import MultipleObjectsReturned, ObjectDoesNotExist
from django.db import migrations, models

from waldur_mastermind.common.utils import quantize_price
from waldur_mastermind.invoices import utils

logger = logging.getLogger(__name__)


def fill_resource_field(apps, schema_editor):
    InvoiceItem = apps.get_model('invoices', 'InvoiceItem')
    Resource = apps.get_model('marketplace', 'Resource')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    Tenant = apps.get_model('openstack', 'Tenant')

    class Units:
        PER_MONTH = 'month'
        PER_HALF_MONTH = 'half_month'
        PER_DAY = 'day'
        PER_HOUR = 'hour'
        QUANTITY = 'quantity'

    def usage_days(item):
        full_days = utils.get_full_days(item.start, item.end)
        return full_days

    def price(item):
        return quantize_price(item.unit_price * decimal.Decimal(get_factor(item)))

    def get_factor(item):
        month_days = monthrange(item.start.year, item.start.month)[1]

        if item.unit == Units.QUANTITY:
            return item.quantity
        elif item.unit == Units.PER_HOUR:
            return utils.get_full_hours(item.start, item.end)
        elif item.unit == Units.PER_DAY:
            return usage_days(item)
        elif item.unit == Units.PER_HALF_MONTH:
            if (item.start.day == 1 and item.end.day == 15) or (
                item.start.day == 16 and item.end.day == month_days
            ):
                return 1
            elif item.start.day == 1 and item.end.day == month_days:
                return 2
            elif item.start.day == 1 and item.end.day > 15:
                return quantize_price(
                    1 + (item.end.day - 15) / decimal.Decimal(month_days / 2)
                )
            elif item.start.day < 16 and item.end.day == month_days:
                return quantize_price(
                    1 + (16 - item.start.day) / decimal.Decimal(month_days / 2)
                )
            else:
                return quantize_price(
                    (item.end.day - item.start.day + 1)
                    / decimal.Decimal(month_days / 2.0)
                )
        # By default PER_MONTH
        else:
            if item.start.day == 1 and item.end.day == month_days:
                return 1

            use_days = (item.end - item.start).days + 1
            return quantize_price(decimal.Decimal(use_days) / month_days)

    errors = []

    for item in InvoiceItem.objects.extra(
        select={'object_id': 'object_id', 'content_type_id': 'content_type_id'}
    ).all():
        if item.content_type_id == ContentType.objects.get_for_model(Resource).id:
            try:
                resource = Resource.objects.get(id=item.object_id)
                item.resource_id = resource.id
                item.save()
            except (ObjectDoesNotExist, MultipleObjectsReturned):
                logger.warning(
                    'An invoice item with ID: %d linked with a non-existent resource. Invoice: %d %d.%d',
                    item.id,
                    item.invoice.id,
                    item.invoice.year,
                    item.invoice.month,
                )
        else:
            try:
                if item.details.get('tenant_uuid'):
                    tenant = Tenant.objects.get(uuid=item.details['tenant_uuid'])
                    resource = Resource.objects.get(
                        content_type=ContentType.objects.get_for_model(Tenant),
                        object_id=tenant.id,
                    )
                else:
                    resource = Resource.objects.get(
                        content_type_id=item.content_type_id, object_id=item.object_id
                    )
                item.resource_id = resource.id
            except (ObjectDoesNotExist, MultipleObjectsReturned):
                # If the relevant resource is not found
                if not price(item):
                    logger.warning(
                        'An invoice item with ID: %s has been deleted as its price is 0 and item is not connected with any resource. Invoice: %s %d.%d',
                        item.name,
                        item.id,
                        item.invoice.year,
                        item.invoice.month,
                    )
                    item.delete()
                elif not item.object_id:
                    # Item scope is not defined, but price != 0.
                    # For compensation case.
                    pass
                elif item.object_id and item.invoice.year < 2018:
                    # A item scope is defined, but the relevant resource is not found.
                    # Delete this if this is deprecated invoice items.
                    logger.warning(
                        'An invoice item with ID: %s is skipped as its scope is not found. Invoice: %s %d.%d',
                        item.name,
                        item.id,
                        item.invoice.year,
                        item.invoice.month,
                    )
                    pass
                elif (
                    item.content_type.app_label == 'packages'
                    or not apps.get_model(
                        item.content_type.app_label, item.content_type.model
                    )
                    .objects.filter(pk=item.object_id)
                    .exists()
                ):
                    # If the scope is associated with a remote object.
                    pass
                else:
                    errors.append(
                        '\n id: %d, date: %d.%d, details: %s, object_id: %s'
                        % (
                            item.id,
                            item.invoice.year,
                            item.invoice.month,
                            item.details,
                            item.object_id,
                        )
                    )
            else:
                item.save()

    if errors:
        raise Exception(
            'Resources for invoice items do not exist. Count: %d, items ids: %s'
            % (len(errors), ', '.join(errors))
        )


class Migration(migrations.Migration):

    dependencies = [
        ('marketplace', '0036_offeringcomponent_backend_id'),
        ('invoices', '0043_drop_package_column'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('waldur_slurm', '0016_drop_deposit_fields'),
        ('support', '0010_error_traceback'),
        ('openstack', '0021_port_device_info'),
        ('openstack_tenant', '0016_internalip_device_info'),
    ]

    operations = [
        migrations.AddField(
            model_name='invoiceitem',
            name='resource',
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='invoice_items',
                to='marketplace.Resource',
            ),
        ),
        migrations.RunPython(fill_resource_field),
        migrations.RemoveField(
            model_name='invoiceitem',
            name='content_type',
        ),
        migrations.RemoveField(
            model_name='invoiceitem',
            name='object_id',
        ),
    ]
