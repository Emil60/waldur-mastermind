from django.db import migrations

TABLES = (
    'cost_tracking_consumptiondetails',
    'cost_tracking_defaultpricelistitem',
    'cost_tracking_priceestimate',
    'cost_tracking_priceestimate_parents',
    'cost_tracking_pricelistitem',
    'defender_accessattempt',
    'experts_expertbid',
    'experts_expertcontract',
    'experts_expertprovider',
    'experts_expertrequest',
    'jupyter_hub_management_jupyterhubmanagement',
    'jupyter_hub_management_jupyterhubmanagementdeleterequest',
    'jupyter_hub_management_jupyterhubmanagementmakevirtualenvir675d',
    'jupyter_hub_management_jupyterhubmanagementmakevirtualenvir9ffe',
    'jupyter_hub_management_jupyterhubmanagementsyncconfiguratiob4f6',
    'jupyter_hub_management_jupyterhuboauthconfig',
    'jupyter_hub_management_jupyterhubuser',
    'nodeconductor_aws_awsservice',
    'nodeconductor_aws_awsserviceprojectlink',
    'nodeconductor_aws_image',
    'nodeconductor_aws_instance',
    'nodeconductor_aws_region',
    'nodeconductor_aws_size',
    'nodeconductor_aws_size_regions',
    'nodeconductor_aws_volume',
    'nodeconductor_azure_azureservice',
    'nodeconductor_azure_azureserviceprojectlink',
    'nodeconductor_azure_image',
    'nodeconductor_azure_instanceendpoint',
    'nodeconductor_azure_virtualmachine',
    'nodeconductor_cost_planning_category',
    'nodeconductor_cost_planning_deploymentplan',
    'nodeconductor_cost_planning_deploymentplan_certifications',
    'nodeconductor_cost_planning_deploymentplanitem',
    'nodeconductor_cost_planning_preset',
    'nodeconductor_digitalocean_digitaloceanservice',
    'nodeconductor_digitalocean_digitaloceanserviceprojectlink',
    'nodeconductor_digitalocean_droplet',
    'nodeconductor_digitalocean_image',
    'nodeconductor_digitalocean_image_regions',
    'nodeconductor_digitalocean_region',
    'nodeconductor_digitalocean_size',
    'nodeconductor_digitalocean_size_regions',
    'playbook_jobs_job',
    'playbook_jobs_playbook',
    'playbook_jobs_playbookparameter',
    'python_management_cachedrepositorypythonlibrary',
    'python_management_installedlibrary',
    'python_management_pythonmanagement',
    'python_management_pythonmanagementdeleterequest',
    'python_management_pythonmanagementdeletevirtualenvrequest',
    'python_management_pythonmanagementfindinstalledlibrariesrequest',
    'python_management_pythonmanagementfindvirtualenvsrequest',
    'python_management_pythonmanagementinitializerequest',
    'python_management_pythonmanagementsynchronizerequest',
    'python_management_virtualenvironment',
    'waldur_ansible_job',
    'waldur_ansible_playbook',
    'waldur_ansible_playbookparameter',
    'waldur_cost_planning_category',
    'waldur_cost_planning_deploymentplan',
    'waldur_cost_planning_deploymentplan_certifications',
    'waldur_cost_planning_deploymentplanitem',
    'waldur_cost_planning_preset',
    'waldur_rijkscloud_flavor',
    'waldur_rijkscloud_floatingip',
    'waldur_rijkscloud_instance',
    'waldur_rijkscloud_internalip',
    'waldur_rijkscloud_network',
    'waldur_rijkscloud_rijkscloudservice',
    'waldur_rijkscloud_rijkscloudserviceprojectlink',
    'waldur_rijkscloud_subnet',
    'waldur_rijkscloud_volume',
    'waldur_waldur_remotewaldurservice',
    'waldur_waldur_remotewaldurserviceprojectlink',
)


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0017_affiliations_default'),
    ]

    operations = [
        migrations.RunSQL(f'DROP TABLE IF EXISTS {table} CASCADE') for table in TABLES
    ]
